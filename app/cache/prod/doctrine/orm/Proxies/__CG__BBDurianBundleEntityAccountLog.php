<?php

namespace Proxies\__CG__\BB\DurianBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class AccountLog extends \BB\DurianBundle\Entity\AccountLog implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'id', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'currencyName', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'account', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'web', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'accountDate', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'accountName', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'nameReal', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'levelId', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'accountNo', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'branch', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'bankName', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'gold', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'remark', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'check02', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'money01', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'money02', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'money03', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'fromId', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'previousId', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'isTest', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'detailModified', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'multipleAudit', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'statusStr', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'status', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'count', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'updateAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'domain');
        }

        return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'id', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'currencyName', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'account', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'web', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'accountDate', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'accountName', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'nameReal', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'levelId', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'accountNo', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'branch', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'bankName', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'gold', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'remark', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'check02', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'money01', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'money02', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'money03', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'fromId', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'previousId', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'isTest', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'detailModified', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'multipleAudit', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'statusStr', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'status', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'count', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'updateAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\AccountLog' . "\0" . 'domain');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (AccountLog $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrencyName($currencyName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrencyName', array($currencyName));

        return parent::setCurrencyName($currencyName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrencyName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrencyName', array());

        return parent::getCurrencyName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccount($account)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccount', array($account));

        return parent::setAccount($account);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccount', array());

        return parent::getAccount();
    }

    /**
     * {@inheritDoc}
     */
    public function setWeb($web)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWeb', array($web));

        return parent::setWeb($web);
    }

    /**
     * {@inheritDoc}
     */
    public function getWeb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWeb', array());

        return parent::getWeb();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccountDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccountDate', array($date));

        return parent::setAccountDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccountDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccountDate', array());

        return parent::getAccountDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccountName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccountName', array($name));

        return parent::setAccountName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccountName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccountName', array());

        return parent::getAccountName();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameReal($nameReal)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameReal', array($nameReal));

        return parent::setNameReal($nameReal);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameReal()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameReal', array());

        return parent::getNameReal();
    }

    /**
     * {@inheritDoc}
     */
    public function setLevelId($levelId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLevelId', array($levelId));

        return parent::setLevelId($levelId);
    }

    /**
     * {@inheritDoc}
     */
    public function getLevelId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLevelId', array());

        return parent::getLevelId();
    }

    /**
     * {@inheritDoc}
     */
    public function setAccountNo($no)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAccountNo', array($no));

        return parent::setAccountNo($no);
    }

    /**
     * {@inheritDoc}
     */
    public function getAccountNo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAccountNo', array());

        return parent::getAccountNo();
    }

    /**
     * {@inheritDoc}
     */
    public function setBranch($branch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBranch', array($branch));

        return parent::setBranch($branch);
    }

    /**
     * {@inheritDoc}
     */
    public function getBranch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBranch', array());

        return parent::getBranch();
    }

    /**
     * {@inheritDoc}
     */
    public function setBankName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBankName', array($name));

        return parent::setBankName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getBankName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBankName', array());

        return parent::getBankName();
    }

    /**
     * {@inheritDoc}
     */
    public function setGold($gold)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGold', array($gold));

        return parent::setGold($gold);
    }

    /**
     * {@inheritDoc}
     */
    public function getGold()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGold', array());

        return parent::getGold();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemark($remark)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemark', array($remark));

        return parent::setRemark($remark);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemark()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemark', array());

        return parent::getRemark();
    }

    /**
     * {@inheritDoc}
     */
    public function setCheck02($check)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCheck02', array($check));

        return parent::setCheck02($check);
    }

    /**
     * {@inheritDoc}
     */
    public function getCheck02()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCheck02', array());

        return parent::getCheck02();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoney01($money)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoney01', array($money));

        return parent::setMoney01($money);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoney01()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoney01', array());

        return parent::getMoney01();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoney02($money)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoney02', array($money));

        return parent::setMoney02($money);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoney02()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoney02', array());

        return parent::getMoney02();
    }

    /**
     * {@inheritDoc}
     */
    public function setMoney03($money)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMoney03', array($money));

        return parent::setMoney03($money);
    }

    /**
     * {@inheritDoc}
     */
    public function getMoney03()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMoney03', array());

        return parent::getMoney03();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromId', array($id));

        return parent::setFromId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getFromId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFromId', array());

        return parent::getFromId();
    }

    /**
     * {@inheritDoc}
     */
    public function setPreviousId($entryId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPreviousId', array($entryId));

        return parent::setPreviousId($entryId);
    }

    /**
     * {@inheritDoc}
     */
    public function getPreviousId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPreviousId', array());

        return parent::getPreviousId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsTest($boolean)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsTest', array($boolean));

        return parent::setIsTest($boolean);
    }

    /**
     * {@inheritDoc}
     */
    public function isTest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTest', array());

        return parent::isTest();
    }

    /**
     * {@inheritDoc}
     */
    public function detailModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detailModified', array());

        return parent::detailModified();
    }

    /**
     * {@inheritDoc}
     */
    public function isDetailModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isDetailModified', array());

        return parent::isDetailModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setMultipleAdudit($audit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMultipleAdudit', array($audit));

        return parent::setMultipleAdudit($audit);
    }

    /**
     * {@inheritDoc}
     */
    public function getMultipleAudit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMultipleAudit', array());

        return parent::getMultipleAudit();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatusStr($str)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatusStr', array($str));

        return parent::setStatusStr($str);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusStr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusStr', array());

        return parent::getStatusStr();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function addCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCount', array());

        return parent::addCount();
    }

    /**
     * {@inheritDoc}
     */
    public function zeroCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'zeroCount', array());

        return parent::zeroCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCount', array());

        return parent::getCount();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateAt', array());

        return parent::getUpdateAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getDomain()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDomain', array());

        return parent::getDomain();
    }

    /**
     * {@inheritDoc}
     */
    public function setDomain($domain)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDomain', array($domain));

        return parent::setDomain($domain);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

}
