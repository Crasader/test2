<?php

namespace Proxies\__CG__\BB\DurianBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserPassword extends \BB\DurianBundle\Entity\UserPassword implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'user', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'hash', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'expireAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'modifiedAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'reset', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'oncePassword', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'used', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'onceExpireAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'errNum');
        }

        return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'user', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'hash', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'expireAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'modifiedAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'reset', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'oncePassword', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'used', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'onceExpireAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\UserPassword' . "\0" . 'errNum');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserPassword $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setHash($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHash', array($value));

        return parent::setHash($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHash', array());

        return parent::getHash();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpireAt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpireAt', array($date));

        return parent::setExpireAt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpireAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpireAt', array());

        return parent::getExpireAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedAt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedAt', array($date));

        return parent::setModifiedAt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedAt', array());

        return parent::getModifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isReset', array());

        return parent::isReset();
    }

    /**
     * {@inheritDoc}
     */
    public function setReset($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReset', array($bool));

        return parent::setReset($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function getErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrNum', array());

        return parent::getErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function addErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addErrNum', array());

        return parent::addErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function zeroErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'zeroErrNum', array());

        return parent::zeroErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function setErrNum($errNum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setErrNum', array($errNum));

        return parent::setErrNum($errNum);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setOncePassword($oncePassword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOncePassword', array($oncePassword));

        return parent::setOncePassword($oncePassword);
    }

    /**
     * {@inheritDoc}
     */
    public function getOncePassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOncePassword', array());

        return parent::getOncePassword();
    }

    /**
     * {@inheritDoc}
     */
    public function isUsed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isUsed', array());

        return parent::isUsed();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsed($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsed', array($bool));

        return parent::setUsed($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function setOnceExpireAt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOnceExpireAt', array($date));

        return parent::setOnceExpireAt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getOnceExpireAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOnceExpireAt', array());

        return parent::getOnceExpireAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setFromRemoved(\BB\DurianBundle\Entity\RemovedUserPassword $removedPassword)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromRemoved', array($removedPassword));

        return parent::setFromRemoved($removedPassword);
    }

}
