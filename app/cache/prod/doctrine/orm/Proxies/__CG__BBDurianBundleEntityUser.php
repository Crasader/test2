<?php

namespace Proxies\__CG__\BB\DurianBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \BB\DurianBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'parent', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'domain', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'alias', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'role', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'sub', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'enable', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'block', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'test', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'hiddenTest', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'bankrupt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'rent', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'size', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'currency', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'errNum', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'createdAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'modifiedAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'lastLogin', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'passwordExpireAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'passwordReset', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'lastBank', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'credits', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'cash', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'cashFake', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'cards', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'shareLimits', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'shareLimitNexts', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'subSizeFlag');
        }

        return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'parent', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'domain', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'alias', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'role', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'sub', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'enable', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'block', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'test', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'hiddenTest', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'bankrupt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'rent', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'size', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'currency', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'errNum', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'createdAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'modifiedAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'lastLogin', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'passwordExpireAt', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'passwordReset', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'lastBank', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'credits', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'cash', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'cashFake', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'cards', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'shareLimits', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'shareLimitNexts', '' . "\0" . 'BB\\DurianBundle\\Entity\\User' . "\0" . 'subSizeFlag');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', array($id));

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\BB\DurianBundle\Entity\User $parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', array($parent));

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubSizeFlag()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubSizeFlag', array());

        return parent::getSubSizeFlag();
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', array());

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllParents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllParents', array());

        return parent::getAllParents();
    }

    /**
     * {@inheritDoc}
     */
    public function getAllParentsId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllParentsId', array());

        return parent::getAllParentsId();
    }

    /**
     * {@inheritDoc}
     */
    public function hasParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasParent', array());

        return parent::hasParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getDomain()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDomain', array());

        return parent::getDomain();
    }

    /**
     * {@inheritDoc}
     */
    public function setDomain($domain)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDomain', array($domain));

        return parent::setDomain($domain);
    }

    /**
     * {@inheritDoc}
     */
    public function setAlias($alias)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAlias', array($alias));

        return parent::setAlias($alias);
    }

    /**
     * {@inheritDoc}
     */
    public function getAlias()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlias', array());

        return parent::getAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setSub($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSub', array($bool));

        return parent::setSub($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function isSub()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isSub', array());

        return parent::isSub();
    }

    /**
     * {@inheritDoc}
     */
    public function isTest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isTest', array());

        return parent::isTest();
    }

    /**
     * {@inheritDoc}
     */
    public function setTest($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTest', array($bool));

        return parent::setTest($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function isHiddenTest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isHiddenTest', array());

        return parent::isHiddenTest();
    }

    /**
     * {@inheritDoc}
     */
    public function setHiddenTest($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHiddenTest', array($bool));

        return parent::setHiddenTest($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function isRent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRent', array());

        return parent::isRent();
    }

    /**
     * {@inheritDoc}
     */
    public function setRent($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRent', array($bool));

        return parent::setRent($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', array());

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function addSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSize', array());

        return parent::addSize();
    }

    /**
     * {@inheritDoc}
     */
    public function subSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'subSize', array());

        return parent::subSize();
    }

    /**
     * {@inheritDoc}
     */
    public function getErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrNum', array());

        return parent::getErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function addErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addErrNum', array());

        return parent::addErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function zeroErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'zeroErrNum', array());

        return parent::zeroErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', array());

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency', array($currency));

        return parent::setCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($date));

        return parent::setCreatedAt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedAt', array());

        return parent::getModifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedAt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedAt', array($date));

        return parent::setModifiedAt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLogin', array());

        return parent::getLastLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastLogin(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastLogin', array($date));

        return parent::setLastLogin($date);
    }

    /**
     * {@inheritDoc}
     */
    public function disable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'disable', array());

        return parent::disable();
    }

    /**
     * {@inheritDoc}
     */
    public function enable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'enable', array());

        return parent::enable();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', array());

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function block()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'block', array());

        return parent::block();
    }

    /**
     * {@inheritDoc}
     */
    public function unblock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unblock', array());

        return parent::unblock();
    }

    /**
     * {@inheritDoc}
     */
    public function isBlock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBlock', array());

        return parent::isBlock();
    }

    /**
     * {@inheritDoc}
     */
    public function setBankrupt($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBankrupt', array($bool));

        return parent::setBankrupt($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function isBankrupt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isBankrupt', array());

        return parent::isBankrupt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($value));

        return parent::setPassword($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPasswordExpireAt(\DateTime $date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPasswordExpireAt', array($date));

        return parent::setPasswordExpireAt($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getPasswordExpireAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPasswordExpireAt', array());

        return parent::getPasswordExpireAt();
    }

    /**
     * {@inheritDoc}
     */
    public function isPasswordReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPasswordReset', array());

        return parent::isPasswordReset();
    }

    /**
     * {@inheritDoc}
     */
    public function setPasswordReset($bool)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPasswordReset', array($bool));

        return parent::setPasswordReset($bool);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastBank()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastBank', array());

        return parent::getLastBank();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastBank($bankId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastBank', array($bankId));

        return parent::setLastBank($bankId);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', array());

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function setRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRole', array($role));

        return parent::setRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getCredits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredits', array());

        return parent::getCredits();
    }

    /**
     * {@inheritDoc}
     */
    public function getCredit($groupNum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCredit', array($groupNum));

        return parent::getCredit($groupNum);
    }

    /**
     * {@inheritDoc}
     */
    public function addCredit(\BB\DurianBundle\Entity\Credit $credit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCredit', array($credit));

        return parent::addCredit($credit);
    }

    /**
     * {@inheritDoc}
     */
    public function getCash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCash', array());

        return parent::getCash();
    }

    /**
     * {@inheritDoc}
     */
    public function addCash(\BB\DurianBundle\Entity\Cash $cash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCash', array($cash));

        return parent::addCash($cash);
    }

    /**
     * {@inheritDoc}
     */
    public function getCashFake()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCashFake', array());

        return parent::getCashFake();
    }

    /**
     * {@inheritDoc}
     */
    public function addCashFake(\BB\DurianBundle\Entity\CashFake $fake)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCashFake', array($fake));

        return parent::addCashFake($fake);
    }

    /**
     * {@inheritDoc}
     */
    public function getCard()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCard', array());

        return parent::getCard();
    }

    /**
     * {@inheritDoc}
     */
    public function addCard(\BB\DurianBundle\Entity\Card $card)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCard', array($card));

        return parent::addCard($card);
    }

    /**
     * {@inheritDoc}
     */
    public function addShareLimit(\BB\DurianBundle\Entity\ShareLimit $shareLimit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addShareLimit', array($shareLimit));

        return parent::addShareLimit($shareLimit);
    }

    /**
     * {@inheritDoc}
     */
    public function getShareLimits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShareLimits', array());

        return parent::getShareLimits();
    }

    /**
     * {@inheritDoc}
     */
    public function getShareLimit($groupNum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShareLimit', array($groupNum));

        return parent::getShareLimit($groupNum);
    }

    /**
     * {@inheritDoc}
     */
    public function addShareLimitNext(\BB\DurianBundle\Entity\ShareLimitNext $shareLimitNext)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addShareLimitNext', array($shareLimitNext));

        return parent::addShareLimitNext($shareLimitNext);
    }

    /**
     * {@inheritDoc}
     */
    public function getShareLimitNexts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShareLimitNexts', array());

        return parent::getShareLimitNexts();
    }

    /**
     * {@inheritDoc}
     */
    public function getShareLimitNext($groupNum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShareLimitNext', array($groupNum));

        return parent::getShareLimitNext($groupNum);
    }

    /**
     * {@inheritDoc}
     */
    public function isAncestor($ancestor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAncestor', array($ancestor));

        return parent::isAncestor($ancestor);
    }

    /**
     * {@inheritDoc}
     */
    public function setFromRemoved(\BB\DurianBundle\Entity\RemovedUser $removedUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFromRemoved', array($removedUser));

        return parent::setFromRemoved($removedUser);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array());

        return parent::toArray();
    }

}
