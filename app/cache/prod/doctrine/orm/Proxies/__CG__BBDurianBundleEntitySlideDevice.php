<?php

namespace Proxies\__CG__\BB\DurianBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SlideDevice extends \BB\DurianBundle\Entity\SlideDevice implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'id', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'appId', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'hash', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'errNum', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'enabled', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'os', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'brand', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'model', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'bindings');
        }

        return array('__isInitialized__', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'id', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'appId', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'hash', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'errNum', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'enabled', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'os', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'brand', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'model', '' . "\0" . 'BB\\DurianBundle\\Entity\\SlideDevice' . "\0" . 'bindings');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SlideDevice $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getAppId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAppId', array());

        return parent::getAppId();
    }

    /**
     * {@inheritDoc}
     */
    public function setHash($hash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHash', array($hash));

        return parent::setHash($hash);
    }

    /**
     * {@inheritDoc}
     */
    public function getHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHash', array());

        return parent::getHash();
    }

    /**
     * {@inheritDoc}
     */
    public function addBinding(\BB\DurianBundle\Entity\SlideBinding $binding)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBinding', array($binding));

        return parent::addBinding($binding);
    }

    /**
     * {@inheritDoc}
     */
    public function countBindings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'countBindings', array());

        return parent::countBindings();
    }

    /**
     * {@inheritDoc}
     */
    public function getBindings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBindings', array());

        return parent::getBindings();
    }

    /**
     * {@inheritDoc}
     */
    public function addErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addErrNum', array());

        return parent::addErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function zeroErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'zeroErrNum', array());

        return parent::zeroErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function setErrNum($errNum)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setErrNum', array($errNum));

        return parent::setErrNum($errNum);
    }

    /**
     * {@inheritDoc}
     */
    public function getErrNum()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrNum', array());

        return parent::getErrNum();
    }

    /**
     * {@inheritDoc}
     */
    public function disable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'disable', array());

        return parent::disable();
    }

    /**
     * {@inheritDoc}
     */
    public function enable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'enable', array());

        return parent::enable();
    }

    /**
     * {@inheritDoc}
     */
    public function isEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnabled', array());

        return parent::isEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setOs($os)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOs', array($os));

        return parent::setOs($os);
    }

    /**
     * {@inheritDoc}
     */
    public function getOs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOs', array());

        return parent::getOs();
    }

    /**
     * {@inheritDoc}
     */
    public function setBrand($brand)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBrand', array($brand));

        return parent::setBrand($brand);
    }

    /**
     * {@inheritDoc}
     */
    public function getBrand()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBrand', array());

        return parent::getBrand();
    }

    /**
     * {@inheritDoc}
     */
    public function setModel($model)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModel', array($model));

        return parent::setModel($model);
    }

    /**
     * {@inheritDoc}
     */
    public function getModel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModel', array());

        return parent::getModel();
    }

}
